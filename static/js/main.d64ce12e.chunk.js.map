{"version":3,"sources":["api/api_config.js","api/spreadsheet.js","App.js","serviceWorker.js","index.js"],"names":["api_config","apiKey","discoveryDocs","spreadsheetId","load","callback","window","gapi","client","sheets","spreadsheets","values","get","range","then","response","data","result","console","log","cars","map","car","year","make","model","error","updateCell","params","valueInputOption","valueRangeBody","update","reason","message","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initClient","init","scope","clientId","onLoad","handleSignInClick","event","auth2","getAuthInstance","signIn","handleSignOutClick","signOut","setState","state","react_default","a","createElement","className","id","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAAeA,EAAA,CACbC,OAAQ,0CACRC,cACE,CAAC,4DACHC,cAAe,gDCGJC,EAAO,SAACC,GACnBC,OAAOC,KAAKC,OAAOJ,KAAK,SAAU,KAAM,WACtCE,OAAOC,KAAKC,OAAOC,OAAOC,aAAaC,OACpCC,IAAI,CACHT,cAAeH,EAAWG,cAC1BU,MAAO,kBAERC,KACC,SAAAC,GACE,IAAMC,EAAOD,EAASE,OAAON,OAC7BO,QAAQC,IAAIH,GACZ,IAAMI,EAAOJ,EAAKK,IAAI,SAAAC,GAAG,MAAK,CAC5BC,KAAMD,EAAI,GACVE,KAAMF,EAAI,GACVG,MAAOH,EAAI,OACN,GACPjB,EAAS,CACPe,UAGJ,SAAAL,GACEV,GAAS,EAAOU,EAASE,OAAOS,YAgB9BC,EAAa,WACxB,IAAIC,EAAS,CACZzB,cAAeH,EAAWG,cACpBU,MAAO,gBACPgB,iBAAkB,gBAGrBC,EAAiB,CACnBnB,OAAU,CACR,CACE,aAINL,OAAOC,KAAKC,OAAOJ,KAAK,SAAU,KAAM,WACxBE,OAAOC,KAAKC,OAAOC,OAAOC,aAAaC,OAAOoB,OAAOH,EAAQE,GAChEhB,KAAK,SAASC,GAEpBG,QAAQC,IAAIJ,EAASE,SACpB,SAASe,GACVd,QAAQQ,MAAM,UAAYM,EAAOf,OAAOS,MAAMO,cCFvCC,cAzDb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAYRQ,WAAa,WACXrC,OAAOC,KAAKC,OAAOoC,KAAK,CACtB3C,OAAQD,EAAWC,OACnBC,cAAeF,EAAWE,cAC1B2C,MAAO,+CACPC,SAAU,6EAEXhC,KAAK,cAILA,KAAK,WACJV,EAAKgC,EAAKW,QACVpB,OA1BcS,EA8BlBY,kBAAoB,SAACC,GACnB3C,OAAOC,KAAK2C,MAAMC,kBAAkBC,UA/BpBhB,EAkClBiB,mBAAoB,SAACJ,GACnB3C,OAAOC,KAAK2C,MAAMC,kBAAkBG,WAnCpBlB,EAsClBW,OAAS,SAAC/B,EAAMU,GACd,GAAIV,EAAM,CACR,IAAMI,EAAOJ,EAAKI,KAClBgB,EAAKmB,SAAS,CAAEnC,cAEhBgB,EAAKmB,SAAS,CAAE7B,WAzClBU,EAAKoB,MAAQ,CACXpC,KAAM,GACNM,MAAO,MAJOU,mFAShB9B,OAAOC,KAAKH,KAAK,eAAgBmC,KAAKI,6CAuCtC,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQE,GAAG,gBAAgBC,QAASvB,KAAKS,mBAAzC,WACAS,EAAAC,EAAAC,cAAA,UAAQE,GAAG,iBAAiBC,QAASvB,KAAKc,oBAA1C,oBApDUU,aCQEC,QACW,cAA7B1D,OAAO2D,SAASC,UAEe,UAA7B5D,OAAO2D,SAASC,UAEhB5D,OAAO2D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7D,KAAK,SAAA8D,GACjCA,EAAaC","file":"static/js/main.d64ce12e.chunk.js","sourcesContent":["export default {\n  apiKey: \"AIzaSyCTBSEfkZYCFirL8A8PuFHpMZhdouI_f_o\",\n  discoveryDocs: \n    [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"],\n  spreadsheetId: \"1VDlWkflsS6xB0WmKsXfmgcxu9FrGPTrsgYVUKq7nLyg\"\n}","import api_config from './api_config';\n\n\n/**\n * Load the cars from the spreadsheet\n * Get the right values from it and assign.\n */\nexport const load = (callback) => {\n  window.gapi.client.load(\"sheets\", \"v4\", () => {\n    window.gapi.client.sheets.spreadsheets.values\n      .get({\n        spreadsheetId: api_config.spreadsheetId,\n        range: \"ThangTD!A3:L3\"\n      })\n      .then(\n        response => {\n          const data = response.result.values;\n          console.log(data)\n          const cars = data.map(car => ({\n            year: car[0],\n            make: car[1],\n            model: car[2]\n          })) || [];\n          callback({\n            cars\n          });\n        },\n        response => {\n          callback(false, response.result.error);\n        }\n      );\n  });\n}\n\n\n// export const updateCell = (callback) => {\n//   window.gapi.client.load(\"sheets\", \"v4\", () => {\n    \n//   });\n// }\n\n/**\n * Update a single cell value\n */\nexport let  updateCell = () => {\n\tvar params = {\n\t\tspreadsheetId: api_config.spreadsheetId,\n        range: 'ThangTD!A3:L3',\n        valueInputOption: 'USER_ENTERED'\n\t};\n\n\tvar valueRangeBody = {\n \t \"values\": [\n\t    [\n    \t  \"thaddng\"\n    \t]\t\n  \t]\n\t}\n\twindow.gapi.client.load(\"sheets\", \"v4\", () => {\n  \tvar request = window.gapi.client.sheets.spreadsheets.values.update(params, valueRangeBody);\n      request.then(function(response) {\n        // TODO: Change code below to process the `response` object:\n        console.log(response.result);\n      }, function(reason) {\n        console.error('error: ' + reason.result.error.message);\n      });\n  });\n}","import React, { Component } from 'react';\nimport api_config from './api/api_config';\nimport {load, updateCell} from './api/spreadsheet';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      cars: [],\n      error: null\n    }\n  };\n\n  componentDidMount() {\n    window.gapi.load(\"client:auth2\", this.initClient)\n    // window.gapi.load(\"auth2\", this.initAuth)\n  };\n\n  initClient = () => {\n    window.gapi.client.init({\n      apiKey: api_config.apiKey,\n      discoveryDocs: api_config.discoveryDocs,\n      scope: \"https://www.googleapis.com/auth/spreadsheets\",\n      clientId: \"865767011202-po9sskitiv9unrjvdb2srumh62n3qnev.apps.googleusercontent.com\"\n    })\n    .then(() => {\n      // window.gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);\n      // updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n    })\n    .then(() => {\n      load(this.onLoad);\n      updateCell();\n    })\n  };\n\n  handleSignInClick = (event) => {\n    window.gapi.auth2.getAuthInstance().signIn();\n  }\n\n  handleSignOutClick= (event) => {\n    window.gapi.auth2.getAuthInstance().signOut();\n  }\n\n  onLoad = (data, error) => {\n    if (data) {\n      const cars = data.cars;\n      this.setState({ cars });\n    } else {\n      this.setState({ error });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button id=\"signin-button\" onClick={this.handleSignInClick}>Sign in</button>\n        <button id=\"signout-button\" onClick={this.handleSignOutClick}>Sign out</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}